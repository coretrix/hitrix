"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[178],{431:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-e8c14dd6",path:"/guide/graphql/dataloaders.html",title:"Dataloaders",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"How to create a dataloader?",slug:"how-to-create-a-dataloader",children:[]},{level:2,title:"How to use a dataloader?",slug:"how-to-use-a-dataloader",children:[]}],filePathRelative:"guide/graphql/dataloaders.md",git:{updatedTime:1644595642e3,contributors:[{name:"Krasimir Ivanov",email:"krasimir.ivanov@coretrix.com",commits:4}]}}},9364:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="dataloaders" tabindex="-1"><a class="header-anchor" href="#dataloaders" aria-hidden="true">#</a> Dataloaders</h1><p>What are GraphQL Dataloaders? Please take a look here https://gqlgen.com/reference/dataloaders/</p><h2 id="how-to-create-a-dataloader" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-dataloader" aria-hidden="true">#</a> How to create a dataloader?</h2><ol><li>Create a folder &quot;dataloaders&quot; inside graphql folder</li><li>Create file dataloaders.go</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> dataloaders\n\n<span class="token comment">//go:generate dataloaden LoaderName uint64 []*/path/entity.SomeModel/Entity</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>Generate dataloaders</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>go generate ./api/<span class="token operator">&lt;</span>binary<span class="token operator">&gt;</span>/graphql/dataloaders/<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>Implement loaders</li></ol><p>go generate will create gen.go file that contains loaders skeleton.</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewLoaders</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">*</span>Loaders <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Loaders<span class="token punctuation">{</span>\n        VariantsByProductID<span class="token punctuation">:</span> LoaderNameLoader<span class="token punctuation">{</span>\n        maxBatch<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n        wait<span class="token punctuation">:</span>     <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span>\n        fetch<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ids <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>entity<span class="token punctuation">.</span>SomeModel<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//Some code here</span>\n\t\t\t\t<span class="token keyword">return</span> someModelSlice<span class="token punctuation">,</span> errors\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="5"><li>Create middleware and attach Dataloaders to context</li></ol><ul><li>Create file dataloader.go</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">DataLoaders</span><span class="token punctuation">(</span>ginEngine <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tginEngine<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tctx <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">NewLoaders</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\tc<span class="token punctuation">.</span>Request <span class="token operator">=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>Add DataLoaders middleware to Gin</li></ul><ol start="6"><li>Add Retriever to resolvers</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// This file will not be regenerated automatically.</span>\n<span class="token comment">//go:generate go run github.com/99designs/gqlgen</span>\n<span class="token comment">// It serves as dependency injection for your app, add any dependencies you require here.</span>\n\n<span class="token keyword">type</span> Resolver <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    DataLoaders dataloaders<span class="token punctuation">.</span>Retriever\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="7"><li>git add &amp; git commit</li></ol><h2 id="how-to-use-a-dataloader" tabindex="-1"><a class="header-anchor" href="#how-to-use-a-dataloader" aria-hidden="true">#</a> How to use a dataloader?</h2><ol><li>Accessing Dataloaders - dataloaders can be accessed using Retreive function in resolvers.</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>someResolver<span class="token punctuation">)</span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> obj <span class="token operator">*</span>model<span class="token punctuation">.</span>SomeModel<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>model<span class="token punctuation">.</span>SomeOtherModel<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token operator">!</span>hitrix<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n\t<span class="token punctuation">}</span>\n\n\tsomeOtherModel<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>DataLoaders<span class="token punctuation">.</span><span class="token function">Retrieve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span>VariantsByProductID<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> someOtherModel<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',20),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);