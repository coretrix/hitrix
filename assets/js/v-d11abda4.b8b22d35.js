"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1495],{4058:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-d11abda4",path:"/guide/services/setting.html",title:"Setting service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/setting.md",git:{updatedTime:1646901485e3,contributors:[{name:"h-khodadadeh",email:"khodadadeh@coretrix.com",commits:2},{name:"Saman Shahroudi",email:"saman.shahroudi@coretrix.com",commits:1}]}}},9689:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="setting-service" tabindex="-1"><a class="header-anchor" href="#setting-service" aria-hidden="true">#</a> Setting service</h1><p>If your application requires configurations that might change or predefined, you need to use setting service. You should save your settings in <code>SettingsEntity</code>, then use this service to fetch it.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="use-case" tabindex="-1"><a class="header-anchor" href="#use-case" aria-hidden="true">#</a> Use case</h1><p>Imagine you need to restrict access to login page after certain number of failed login attempts. You can simply store this value in <code>SettingsEntity</code> and fetch it using this service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> save \n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n <span class="token string">&quot;service&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">SaveConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ormService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ORMEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tormService<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entity<span class="token punctuation">.</span>SettingsEntity<span class="token punctuation">{</span>\n\t\tKey<span class="token punctuation">:</span>       <span class="token string">&quot;user.login.threshold&quot;</span><span class="token punctuation">,</span>\n\t\tValue<span class="token punctuation">:</span>     <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>\n\t\tValueType<span class="token punctuation">:</span> entity<span class="token punctuation">.</span>SettingsValueTypeAll<span class="token punctuation">.</span>SettingsValueTypeNumber<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Then later in your login package, you can retrieve this value and use it:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> login\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;errors&quot;</span>\n    <span class="token string">&quot;service&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>currentCount <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n    ormService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ORMEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    allowed<span class="token punctuation">,</span> found <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetUint64</span><span class="token punctuation">(</span>ormService<span class="token punctuation">,</span> <span class="token string">&quot;user.login.threshold&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> found <span class="token operator">&amp;&amp;</span> currentCount<span class="token operator">&gt;</span> allowed<span class="token punctuation">{</span>\n        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;too many login attempt&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>  \n    <span class="token keyword">return</span> <span class="token boolean">nil</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',11),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);