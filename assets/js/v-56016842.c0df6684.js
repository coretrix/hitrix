"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9524],{602:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-56016842",path:"/guide/services/api_logger.html",title:"API logger service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/api_logger.md",git:{updatedTime:1634291321e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:1}]}}},3551:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="api-logger-service" tabindex="-1"><a class="header-anchor" href="#api-logger-service" aria-hidden="true">#</a> API logger service</h1><p>This service is used to track every api request and response. For example it can be used in any other service as SMS service, Stripe service and so on. Using it you will have a history of all requests and responses and it will help you even in case you need to debug something.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">APILogger</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entity<span class="token punctuation">.</span>APILogEntity<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">APILogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>All the data it will be saved into the <code>APILogEntity</code> entity.</p><p>The methods that this service provide are:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> APILogger <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">LogStart</span><span class="token punctuation">(</span>logType <span class="token builtin">string</span><span class="token punctuation">,</span> request <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token function">LogError</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">,</span> response <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token function">LogSuccess</span><span class="token punctuation">(</span>response <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You should call <code>LogStart</code> before you send request to the api</p><p>You should call <code>LogError</code> in case api return you error</p><p>You should call <code>LogSuccess</code> in case api return you success</p>',12),t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);