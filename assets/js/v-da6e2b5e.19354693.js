"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5154],{6299:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-da6e2b5e",path:"/rules/",title:"Documentation",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Localhost tools",slug:"localhost-tools",children:[{level:3,title:"force-alters",slug:"force-alters",children:[]}]},{level:2,title:"Domains",slug:"domains",children:[]},{level:2,title:"Crons (scripts)",slug:"crons-scripts",children:[]},{level:2,title:"Naming conventions and rules",slug:"naming-conventions-and-rules",children:[]},{level:2,title:"Teamwork rules",slug:"teamwork-rules",children:[]}],filePathRelative:"rules/README.md",git:{updatedTime:1657298404e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:5},{name:"Krasimir Ivanov",email:"krasimir.ivanov@coretrix.com",commits:1}]}}},5e3:(n,a,s)=>{s.r(a),s.d(a,{default:()=>o});const e=(0,s(6252).uE)('<h1 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation" aria-hidden="true">#</a> Documentation</h1><h2 id="localhost-tools" tabindex="-1"><a class="header-anchor" href="#localhost-tools" aria-hidden="true">#</a> Localhost tools</h2><h3 id="force-alters" tabindex="-1"><a class="header-anchor" href="#force-alters" aria-hidden="true">#</a> force-alters</h3><p>If you run your binary with argument <code>--force-alters</code> the program will check for DB and RediSearch alters and it will execute them(only in local mode).</p><p><code>make web-api param=--force-alters</code></p><h2 id="domains" tabindex="-1"><a class="header-anchor" href="#domains" aria-hidden="true">#</a> Domains</h2><h4 id="naming-convention-for-our-backend-domains-are" tabindex="-1"><a class="header-anchor" href="#naming-convention-for-our-backend-domains-are" aria-hidden="true">#</a> Naming convention for our backend domains are:</h4><p><code>[binary name].[env].[project].[domain]</code></p><p>For prod we are skipping <code>[env]</code> For example for our binary called <code>web-api</code> the domain will be <code>web-api.dev.lys.domain.com</code> or <code>web-api.demo.lys.domain.com</code></p><h4 id="naming-convention-for-our-frontend-domains-are" tabindex="-1"><a class="header-anchor" href="#naming-convention-for-our-frontend-domains-are" aria-hidden="true">#</a> Naming convention for our frontend domains are:</h4><p><code>[binary name without suffix api].[env].[project].[domain]</code></p><p>For prod we are skipping [env] For example for <code>web.dev.lys.domain.com</code> or <code>web.demo.lys.domain.com</code></p><h4 id="naming-convention-for-our-rest-endpoints-domains-are" tabindex="-1"><a class="header-anchor" href="#naming-convention-for-our-rest-endpoints-domains-are" aria-hidden="true">#</a> Naming convention for our REST endpoints domains are:</h4><p><code>[noun]/[noun].../[action]/?params</code></p><p>Always use <code>-</code> as separator. Endpoint name is not tied to package name.</p><p><code>POST</code> - CREATE entity actions, SEARCH entity actions</p><p><code>PATCH</code> - UPDATE entity actions</p><p><code>GET</code> - GET entity actions</p><p><code>DELETE</code> - DELETE entity actions</p><p><code>PUT</code> - not used</p><p>Examples:</p><p><code>GET /profile/payment-info/cards/get/</code> - gets cards information</p><p><code>PATCH /profile/payment-info/cards/update/</code> - updates card information</p><p><code>POST /profile/payment-info/cards/create/</code> - creates card</p><p><code>DELETE /profile/payment-info/cards/delete/</code> - deletes card</p><h2 id="crons-scripts" tabindex="-1"><a class="header-anchor" href="#crons-scripts" aria-hidden="true">#</a> Crons (scripts)</h2><p>What is the differences between <code>single-instance-cron</code> and <code>multi-instance-cron</code></p><ul><li><code>single-instance-cron</code> is for crons that cannot scale. Imagine you read something from db every 10min and you update something. If you have more than one instance it&#39;s gonna conflict. That&#39;s why we gonna create only one pod for it</li><li><code>multi-instance-cron</code> for crons that can scale. Imagine you read from queue. You can have as much consumers as you want. That`s why we gonna have more pod instances for it</li></ul><h2 id="naming-conventions-and-rules" tabindex="-1"><a class="header-anchor" href="#naming-conventions-and-rules" aria-hidden="true">#</a> Naming conventions and rules</h2><ol><li>If you have variable that contains one or more entities you should add a suffix to the variable <code>Entity/Entities</code> For example productEntity or productEntities</li><li>Try to avoid <code>append()</code> Example:</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n\tattributeEntities <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token keyword">struct</span><span class="token punctuation">{</span>ID <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> someMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>attributeEntities<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i<span class="token punctuation">,</span> attributeEntity <span class="token operator">:=</span> <span class="token keyword">range</span> attributeEntities <span class="token punctuation">{</span>\n\t\tsomeMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> attributeEntity<span class="token punctuation">.</span>ID <span class="token comment">//here we avoid map because we set the len</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>If you implement communication with external API or something general that can be valid for every other project like Authentication for example, you can implement it as service in Hitrix.</li><li>When declaring a variable, use inferred variable declaration syntax:</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//Acceptable</span>\n    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>OrderEntity<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">//Not acceptable</span>\n    <span class="token keyword">var</span> orderEntity OrderEntity\n    <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>orderEntity<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> OrderEntity <span class="token keyword">struct</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function">someFunc</span><span class="token punctuation">(</span>entity <span class="token operator">*</span>OrderEntity<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="5"><li>For declaring slices, please use <code>make</code> to declare your variable:</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//Acceptable</span>\n    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>OrderEntity<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n    <span class="token comment">//Not acceptable</span>\n    <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>OrderEntity\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> OrderEntity <span class="token keyword">struct</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="6"><li>When instantiating graphql objects, use methods that are defined in <code>populate</code> package. If there is no method for your object, please declare one for your object.</li><li>Don&#39;t use <code>time.Now()</code> . Use <code>ioc.GetClockService().Now()</code> instead. If you need pointer, use <code>ioc.GetClockService().NowPointer()</code>.</li><li>All entity files should have <code>_entity.go</code> suffix, the entity itself should end with <code>Entity</code>.</li><li>In yaml config files we should set env vars only for values that going to be different in different environments(dev/demo/prod) If they are the same we should not use env var, but we can set the value into the yaml file</li><li>Custom redis indexes can be re-indexed using dev panel but dirty queues needs extra effort from developer side.</li></ol><ul><li>You need to extend the slice into <code>DevPanelController-&gt;GetActionListAction</code> slice <code>dirty</code> This step will add new menu in dev panel dashboard.</li><li>Be sure that you added GET url for in into your router For example <code>ginEngine.GET(&quot;/dev/mark-as-dirty-price-changed/&quot;, devPanel.GetMarkAsDirtyPriceChanged)</code></li><li>Your action should look like that</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> controller\n\n<span class="token keyword">type</span> DevPanelController <span class="token keyword">struct</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>controller <span class="token operator">*</span>DevPanelController<span class="token punctuation">)</span> <span class="token function">GetMarkAsDirtyPriceChanged</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tormService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrmEngineForContext</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\tproducer <span class="token operator">:=</span> producers<span class="token punctuation">.</span>PriceChangedDirtyAllProducer<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n\terr <span class="token operator">:=</span> producer<span class="token punctuation">.</span><span class="token function">Produce</span><span class="token punctuation">(</span>ormService<span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tresponse<span class="token punctuation">.</span><span class="token function">ErrorResponseGlobal</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\tc<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>And your processor should look like that:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> model \n<span class="token keyword">type</span> PriceChangedDirtyAllProducer <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>PriceChangedDirtyAllProducer<span class="token punctuation">)</span> <span class="token function">Produce</span><span class="token punctuation">(</span>ormService <span class="token operator">*</span>beeorm<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\tvariantEntity <span class="token operator">:=</span> entity<span class="token punctuation">.</span>VariantEntity<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\twhere <span class="token operator">:=</span> beeorm<span class="token punctuation">.</span><span class="token function">NewWhere</span><span class="token punctuation">(</span><span class="token string">&quot;1 ORDER BY ID ASC&quot;</span><span class="token punctuation">)</span>\n\tpager <span class="token operator">:=</span> <span class="token operator">&amp;</span>beeorm<span class="token punctuation">.</span>Pager<span class="token punctuation">{</span>CurrentPage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> PageSize<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>\n\thasMoreToIndex <span class="token operator">:=</span> <span class="token boolean">true</span>\n\t<span class="token keyword">for</span> hasMoreToIndex <span class="token punctuation">{</span>\n\t\tids <span class="token operator">:=</span> ormService<span class="token punctuation">.</span><span class="token function">SearchIDs</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span> pager<span class="token punctuation">,</span> <span class="token operator">&amp;</span>variantEntity<span class="token punctuation">)</span>\n\n\t\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">break</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span> <span class="token operator">&lt;</span> pager<span class="token punctuation">.</span>PageSize <span class="token punctuation">{</span>\n\t\t\thasMoreToIndex <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\tormService<span class="token punctuation">.</span><span class="token function">MarkDirty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entity<span class="token punctuation">.</span>VariantEntity<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> redisstream<span class="token punctuation">.</span>StreamOrmDirtyPriceChanged<span class="token punctuation">,</span> ids<span class="token operator">...</span><span class="token punctuation">)</span>\n\n\t\tpager<span class="token punctuation">.</span><span class="token function">IncrementPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="teamwork-rules" tabindex="-1"><a class="header-anchor" href="#teamwork-rules" aria-hidden="true">#</a> Teamwork rules</h2><p>We have defined rules that backend and frontend developers should follow to keep good communication and deliver the feature like a one team</p><ol><li>Read and discuss the epic with the business person</li><li>Backend and frontend developers together should go through design and define endpoints and request/response structure. Whenever they are ready they should post it as a comment into the backend ticket to be visible that both agreed on it</li><li>Start implementing the feature</li><li>Before completing the task they should do following things: <ul><li>When backend developer is done and all tests pass he should test every endpoint by himself using <code>swagger</code> on <code>dev</code> environment before complete his ticket</li><li>When frontend developer is done he should deploy on <code>dev</code> and test the feature very well before complete his ticket</li></ul></li><li>When everything works on <code>dev</code> frontend developer is responsible to talk to backend developer and together to deploy on <code>demo</code> and go through the flow and verify if it works</li><li>Mark the task as completed and inform the business person.</li></ol>',43),t={},o=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);