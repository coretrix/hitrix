"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1644],{1828:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-05036bb3",path:"/guide/services/otp.html",title:"OTP service",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Retry feature:",slug:"retry-feature",children:[]},{level:2,title:"Use case",slug:"use-case",children:[]}],filePathRelative:"guide/services/otp.md",git:{updatedTime:1652968637e3,contributors:[{name:"Iliyan",email:"iliyan.motovski@coretrix.com",commits:3},{name:"Yavor",email:"qvor.vasilev@gmail.com",commits:1},{name:"majid mohsenifar",email:"majid.mohsenifar@coretrix.com",commits:1}]}}},4005:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="otp-service" tabindex="-1"><a class="header-anchor" href="#otp-service" aria-hidden="true">#</a> OTP service</h1><p>If you want to authenticate your user using OTP you may need to use OTP service. This service can send the code using SMS or even call and verifying it later.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderOTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Supported OTP providers:</p><ol><li>Twilio</li><li>Sinch</li><li>Mada</li></ol><p>Now it is possible to provide phone number prefixes for each OTP provider.</p><p>For example if I provide the following setting <code>Twilio;Mada:+35987,+35988</code>, this means if phone numer starts with either of <code>+35987</code> or <code>+35988</code>, then we will use <code>Mada</code>, for all others numbers we will use <code>Twilio</code>.</p><p>You can register OTP providers in 2 ways:</p><ol><li>Provide setting in DB for key: <code>otp_sms_provider</code> with value either of <code>Twilio</code> or <code>Sinch</code> or <code>Mada</code>. You can pass all providers as well separated by semicolon - <code>Twilio;Mada:+35987,+35988;Sinch</code>.</li><li>Call <code>registry.ServiceProviderOTP(otp.SMSOTPProviderTwilio, otp.SMSOTPProviderSinch)</code> with 1 or more parameters for force provider.</li></ol><h2 id="retry-feature" tabindex="-1"><a class="header-anchor" href="#retry-feature" aria-hidden="true">#</a> Retry feature:</h2><p>You can set up the service to retry failed OTP send attempts. In order to do this, you need to add in the config:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sms:\n  retry: true\n  max_retries: 20\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>For retry feature you also need to start in your app this consumer:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>    <span class="token comment">// add this if you want to use send OTP retry feature</span>\n    s<span class="token punctuation">.</span><span class="token function">RunBackgroundProcess</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>hitrix<span class="token punctuation">.</span>BackgroundProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    <span class="token keyword">go</span> b<span class="token punctuation">.</span><span class="token function">RunScript</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scripts<span class="token punctuation">.</span>RetryOTPConsumer<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Retry feature uses exponential backoff to retry OTP requests, starting from 0.5 seconds. If <code>max_retries</code> is reached, the consumer will drop the OTP request and mark it unsendable in DB.</p><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="use-case" tabindex="-1"><a class="header-anchor" href="#use-case" aria-hidden="true">#</a> Use case</h2><p>You can send OTP to user phone using SMS or call like this:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> auth\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;context&quot;</span>\n    <span class="token string">&quot;service&quot;</span>\n    <span class="token string">&quot;github.com/coretrix/hitrix/service/component/otp&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">SendOTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ormService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrmEngineForContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    OTPService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// add this if you want to use send OTP retry feature</span>\n    s<span class="token punctuation">.</span><span class="token function">RunBackgroundProcess</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>hitrix<span class="token punctuation">.</span>BackgroundProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \t<span class="token keyword">go</span> b<span class="token punctuation">.</span><span class="token function">RunScript</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scripts<span class="token punctuation">.</span>RetryOTPConsumer<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">//SMS</span>\n    code<span class="token punctuation">,</span> err <span class="token operator">:=</span> OTPService<span class="token punctuation">.</span><span class="token function">SendSMS</span><span class="token punctuation">(</span>ormService<span class="token punctuation">,</span> <span class="token operator">&amp;</span>otp<span class="token punctuation">.</span>Phone<span class="token punctuation">{</span>\n        Number<span class="token punctuation">:</span> <span class="token string">&quot;+123456789&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">//call</span>\n    code<span class="token punctuation">,</span> err <span class="token operator">:=</span> OTPService<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ormService<span class="token punctuation">,</span> <span class="token operator">&amp;</span>otp<span class="token punctuation">.</span>Phone<span class="token punctuation">{</span>\n        Number<span class="token punctuation">:</span> <span class="token string">&quot;+123456789&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>Then you can verify OTP like this:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> auth\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n    <span class="token string">&quot;context&quot;</span>\n    <span class="token string">&quot;service&quot;</span>\n    <span class="token string">&quot;github.com/coretrix/hitrix/service/component/otp&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">Verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ormService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrmEngineForContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    OTPService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    code<span class="token operator">:=</span><span class="token string">&quot;1234&quot;</span> <span class="token comment">//the code user entered</span>\n\n    otpRequestValid<span class="token punctuation">,</span> otpCodeValid<span class="token punctuation">,</span> err <span class="token operator">:=</span> OTPService<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>\n    ormService<span class="token punctuation">,</span>\n    <span class="token operator">&amp;</span>otp<span class="token punctuation">.</span>Phone<span class="token punctuation">{</span>Number<span class="token punctuation">:</span> <span class="token string">&quot;+123456789&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    code<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',23),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);