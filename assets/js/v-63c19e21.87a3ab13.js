"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5874],{2807:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-63c19e21",path:"/guide/features/test.html",title:"Tests",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/features/test.md",git:{updatedTime:1634291321e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:1}]}}},1267:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="tests" tabindex="-1"><a class="header-anchor" href="#tests" aria-hidden="true">#</a> Tests</h1><p>Hitrix provide you test abstract layer that can be used to simulate requests to your graphql api</p><p>In your code you can create similar function that makes new instance of your app</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">createContextMyApp</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">,</span> projectName <span class="token builtin">string</span><span class="token punctuation">,</span> resolvers graphql<span class="token punctuation">.</span>ExecutableSchema<span class="token punctuation">)</span> <span class="token operator">*</span>test<span class="token punctuation">.</span>Ctx <span class="token punctuation">{</span>\n\tdefaultServices <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>service<span class="token punctuation">.</span>Definition<span class="token punctuation">{</span>\n\t\tregistry<span class="token punctuation">.</span><span class="token function">ServiceProviderConfigDirectory</span><span class="token punctuation">(</span><span class="token string">&quot;../example/config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tregistry<span class="token punctuation">.</span><span class="token function">ServiceProviderOrmRegistry</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>Init<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tregistry<span class="token punctuation">.</span><span class="token function">ServiceProviderOrmEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token comment">//your services here</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token function">CreateContext</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>\n\t\tprojectName<span class="token punctuation">,</span>\n\t\tresolvers<span class="token punctuation">,</span>\n\t\t<span class="token keyword">func</span><span class="token punctuation">(</span>ginEngine <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span> middleware<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span>ginEngine<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tdefaultServices<span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>After that you can call queries or mutations</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestProcessApplePurchaseWithEmail</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">type</span> queryRegisterTransactions <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t\tRegisterTransactionsResponse <span class="token operator">*</span>model<span class="token punctuation">.</span>RegisterTransactionsResponse <span class="token string">`graphql:&quot;RegisterTransactions(applePurchaseRequest: $applePurchaseRequest)&quot;`</span>\n\t<span class="token punctuation">}</span>\n\n\tvariables <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>\n\t\t<span class="token string">&quot;applePurchaseRequest&quot;</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>ApplePurchaseRequest<span class="token punctuation">{</span>\n\t\t\tForceEmail<span class="token punctuation">:</span>   <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tfakeMail <span class="token operator">:=</span> <span class="token operator">&amp;</span>mailMock<span class="token punctuation">.</span>Sender<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tfakeMail<span class="token punctuation">.</span><span class="token function">On</span><span class="token punctuation">(</span><span class="token string">&quot;SendTemplate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hymn@abv.bg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>\n\n\tgot <span class="token operator">:=</span> <span class="token operator">&amp;</span>queryRegisterTransactions<span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tprojectName<span class="token punctuation">,</span> resolver <span class="token operator">:=</span> tests<span class="token punctuation">.</span><span class="token function">GetWebAPIResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tctx <span class="token operator">:=</span> tests<span class="token punctuation">.</span><span class="token function">CreateContextWebAPI</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> projectName<span class="token punctuation">,</span> resolver<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tests<span class="token punctuation">.</span>IoCMocks<span class="token punctuation">{</span>MailService<span class="token punctuation">:</span> fakeMail<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\terr <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">HandleMutation</span><span class="token punctuation">(</span>got<span class="token punctuation">,</span> variables<span class="token punctuation">)</span>\n\tassert<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\n\t<span class="token comment">//...</span>\n\tfakeMail<span class="token punctuation">.</span><span class="token function">AssertExpectations</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>Hitrix supports <code>parallel</code> tests In case you want to execute parallel tests you need to set <code>PARALLEL_TESTS=true</code> env var in your IDE config and be sure you don&#39;t have set <code>-p 1</code> in <code>Go tool arguments</code> In case you want to disable <code>parallel</code> tests remove <code>PARALLEL_TESTS</code> or set it to <code>false</code> and set in <code>Go tool arguments</code> value <code>-p 1</code></p>',7),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);