"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7523],{7172:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7d2151d6",path:"/guide/services/sentry.html",title:"Sentry service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/sentry.md",git:{updatedTime:1660820102e3,contributors:[{name:"Iliyan",email:"iliyan.motovski@coretrix.com",commits:1}]}}},2576:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="sentry-service" tabindex="-1"><a class="header-anchor" href="#sentry-service" aria-hidden="true">#</a> Sentry service</h1><p>This service allow you to use sentry for logging events and performance tracking.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderSentry</span><span class="token punctuation">(</span>tracesSampleRate <span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sentry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The methods that this service provide are:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> ISentry <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    <span class="token function">CaptureMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span>\n    <span class="token function">Flush</span><span class="token punctuation">(</span>timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span>\n    <span class="token function">StartSpan</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> operation <span class="token builtin">string</span><span class="token punctuation">,</span> options <span class="token operator">...</span>sentry<span class="token punctuation">.</span>SpanOption<span class="token punctuation">)</span> <span class="token operator">*</span>sentry<span class="token punctuation">.</span>Span\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You should call <code>CaptureMessage</code> when you want to send event to sentry</p><p>You should call <code>Flush</code> in your main file with defer, with 2 second timeout</p><p>You should call <code>StartSpan</code> when you want to start performance monitor</p>',11),t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);