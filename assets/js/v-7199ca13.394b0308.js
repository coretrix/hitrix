"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[71],{9055:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7199ca13",path:"/guide/services/exporter.html",title:"Exporter service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/exporter.md",git:{updatedTime:1634906075e3,contributors:[{name:"Saman Shahroudi",email:"shahroudi.dev@gmail.com",commits:1}]}}},7550:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="exporter-service" tabindex="-1"><a class="header-anchor" href="#exporter-service" aria-hidden="true">#</a> Exporter service</h1><p>This service is able to export business data to various file formats. Currently, we support 2 file formats: <code>XLSX</code> and <code>CSV</code>.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Input data should be filled in as follows:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>sheet <span class="token operator">:=</span> <span class="token string">&quot;sheet 1&quot;</span>\nheaders <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Header 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Header 2&quot;</span><span class="token punctuation">}</span>\n\nrows <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> firstRow <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nfirstRow <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>firstRow<span class="token punctuation">,</span> <span class="token string">&quot;cell 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cell 2&quot;</span><span class="token punctuation">)</span>\nrows <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> firstRow<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> secondRow <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nsecondRow <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>secondRow<span class="token punctuation">,</span> <span class="token string">&quot;cell 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cell 2&quot;</span><span class="token punctuation">)</span>\nrows <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> secondRow<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Use <code>XLSXExportToByte()</code> function to convert raw data to Excel file and return it as a byte slice:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>xlsxBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> exporterService<span class="token punctuation">.</span><span class="token function">XLSXExportToByte</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> rows<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Use <code>XLSXExportToFile()</code> function for converting raw data to Excel file and save it in the given path:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>err <span class="token operator">:=</span> exporterService<span class="token punctuation">.</span><span class="token function">XLSXExportToFile</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Use <code>CSVExportToByte()</code> function to convert raw data to CSV file and return it as a byte slice:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>csvBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> exporterService<span class="token punctuation">.</span><span class="token function">CSVExportToByte</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> rows<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Using <code>CSVExportToFile()</code> function for converting raw data to CSV file and save it in the given path:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>err <span class="token operator">:=</span> exporterService<span class="token punctuation">.</span><span class="token function">XLSXExportToFile</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',16),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);