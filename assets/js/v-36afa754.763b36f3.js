"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8813],{7689:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-36afa754",path:"/guide/services/request_logger.html",title:"Request Logger service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/request_logger.md",git:{updatedTime:169088319e4,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:2}]}}},2883:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="request-logger-service" tabindex="-1"><a class="header-anchor" href="#request-logger-service" aria-hidden="true">#</a> Request Logger service</h1><p>This service is used for logging all upcoming and outgoing requests</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderRequestLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>and you should register the entity <code>RequestLoggerEntity</code> into the ORM</p><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequestLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The functions this service provide are:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>\t<span class="token function">LogRequest</span><span class="token punctuation">(</span>ormService <span class="token operator">*</span>beeorm<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> contentType <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>entity<span class="token punctuation">.</span>RequestLoggerEntity\n    <span class="token function">LogResponse</span><span class="token punctuation">(</span>ormService <span class="token operator">*</span>beeorm<span class="token punctuation">.</span>Engine<span class="token punctuation">,</span> requestLoggerEntity <span class="token operator">*</span>entity<span class="token punctuation">.</span>RequestLoggerEntity<span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> status <span class="token builtin">int</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>They can be used to log any outgoing requests you send</p><p>Also you are able to enable middleware which will log all incoming requests</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>middleware<span class="token punctuation">.</span><span class="token function">RequestLogger</span><span class="token punctuation">(</span>ginEngine<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> requestEntity <span class="token operator">*</span>entity<span class="token punctuation">.</span>RequestLoggerEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tuserService <span class="token operator">:=</span> ioc<span class="token punctuation">.</span><span class="token function">GetUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\tsession<span class="token punctuation">,</span> hasSession <span class="token operator">:=</span> userService<span class="token punctuation">.</span><span class="token function">GetSession</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t\t\t<span class="token keyword">if</span> hasSession <span class="token operator">&amp;&amp;</span> session<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\trequestEntity<span class="token punctuation">.</span>UserID <span class="token operator">=</span> session<span class="token punctuation">.</span>User<span class="token punctuation">.</span>ID\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The second parameter (anonymous function) is called <code>extender</code> and it is used to save extra param to <code>request_logger</code> table like logged user id</p><p>If you want to use this <code>middleware</code> please do not forget to register the entity <code>RequestLoggerEntity</code></p><p>We created a <code>Cleaner</code> that will remove all rows in <code>request_logger</code> table older than 30 days by default. This will prevent your database to be fulfilled with logs If you want to change ttl to other value you can do it from your config file like on the example bellow:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">request_logger</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ttl_in_days</span><span class="token punctuation">:</span> <span class="token number">5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>To enable it please put this code into your <code>single-instance-cron</code></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>    b <span class="token operator">:=</span> <span class="token operator">&amp;</span>hitrix<span class="token punctuation">.</span>BackgroundProcessor<span class="token punctuation">{</span>Server<span class="token punctuation">:</span> s<span class="token punctuation">}</span>\n    b<span class="token punctuation">.</span><span class="token function">RunAsyncRequestLoggerCleaner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Using our Dev Panel you will be able easily to see all requests and search trough them</p>',19),t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);