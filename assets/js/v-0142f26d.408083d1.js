"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3656],{3046:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-0142f26d",path:"/guide/features/validator.html",title:"Validator",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/features/validator.md",git:{updatedTime:1666683363e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:3}]}}},1727:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const t=(0,s(6252).uE)('<h1 id="validator" tabindex="-1"><a class="header-anchor" href="#validator" aria-hidden="true">#</a> Validator</h1><p>We support 2 types of validators. One of them is related to graphql, the other one is related to rest.</p><h4 id="graphql-validator" tabindex="-1"><a class="header-anchor" href="#graphql-validator" aria-hidden="true">#</a> Graphql validator</h4><p>There are 2 steps that needs to be executed if you want to use this kind of validator</p><ol><li><p>Add <code>directive @validate(rules: String!) on INPUT_FIELD_DEFINITION</code> into your <code>schema.graphqls</code> file</p></li><li><p>Call <code>ValidateDirective</code> into your main.go file</p></li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>config <span class="token operator">:=</span> generated<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>Resolvers<span class="token punctuation">:</span> <span class="token operator">&amp;</span>graph<span class="token punctuation">.</span>Resolver<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Directives<span class="token punctuation">:</span> generated<span class="token punctuation">.</span>DirectiveRoot<span class="token punctuation">{</span>Validate<span class="token punctuation">:</span> hitrix<span class="token punctuation">.</span><span class="token function">ValidateDirective</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\ns<span class="token punctuation">.</span><span class="token function">RunServer</span><span class="token punctuation">(</span><span class="token number">4001</span><span class="token punctuation">,</span> generated<span class="token punctuation">.</span><span class="token function">NewExecutableSchema</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ginEngine <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    commonMiddleware<span class="token punctuation">.</span><span class="token function">Cors</span><span class="token punctuation">(</span>ginEngine<span class="token punctuation">)</span>\n    middleware<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span>ginEngine<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>After that you can define the validation rules in that way:</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">input</span> <span class="token object">ApplePurchaseRequest</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">ForceEmail</span><span class="token punctuation">:</span> <span class="token scalar">Boolean</span><span class="token operator">!</span>\n  <span class="token attr-name">Name</span><span class="token punctuation">:</span> <span class="token scalar">String</span>\n  <span class="token attr-name">Email</span><span class="token punctuation">:</span> <span class="token scalar">String</span> <span class="token directive function">@validate</span><span class="token punctuation">(</span><span class="token attr-name">rules</span><span class="token punctuation">:</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token comment">#for rules param you can use everything supported by https://github.com/go-playground/validator validate.Var(value, rules)</span>\n  <span class="token attr-name">AppleReceipt</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>To handle the errors you need to call function <code>hitrix.Validate(ctx, nil)</code> in your resolver</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>mutationResolver<span class="token punctuation">)</span> <span class="token function">RegisterTransactions</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> applePurchaseRequest model<span class="token punctuation">.</span>ApplePurchaseRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>model<span class="token punctuation">.</span>RegisterTransactionsResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token operator">!</span>hitrix<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// your logic here...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The function <code>hitrix.Validate(ctx, nil)</code> as second param accept callback where you can define your custom validation related to business logic</p><h4 id="rest-validator" tabindex="-1"><a class="header-anchor" href="#rest-validator" aria-hidden="true">#</a> REST validator</h4><p>You should define tags for every field</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> RequestDTOMerchantSave <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tStoreID         <span class="token builtin">string</span> <span class="token string">`conform:&quot;trim&quot; binding:&quot;required,min=1,max=30&quot;`</span>\n\tStoreBio        <span class="token builtin">string</span> <span class="token string">`conform:&quot;trim&quot; binding:&quot;omitempty,min=5,max=1000&quot;`</span>\n\tAvatarFileID    <span class="token operator">*</span><span class="token builtin">uint64</span>\n\tContactPhone    <span class="token operator">*</span>ContactPhone    <span class="token string">`binding:&quot;omitempty&quot;`</span>\n\tContactWhatsapp <span class="token operator">*</span>ContactWhatsapp <span class="token string">`binding:&quot;omitempty&quot;`</span>\n\tContactWeb      <span class="token builtin">string</span>           <span class="token string">`binding:&quot;omitempty,url&quot;`</span>\n\tContactTelegram <span class="token operator">*</span>ContactTelegram <span class="token string">`binding:&quot;omitempty&quot;`</span>\n\tContactEmail    <span class="token builtin">string</span>           <span class="token string">`conform:&quot;trim&quot; binding:&quot;omitempty,email&quot;`</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Using <code>binding</code> you can define all rules needed for the particular validation Using <code>conform</code> you can trim the value before validation to be applied</p><h5 id="validation-notes" tabindex="-1"><a class="header-anchor" href="#validation-notes" aria-hidden="true">#</a> Validation notes</h5><pre><code>RepatriationAfterTyreBlockInMinutes int               `binding:&quot;numeric,gte=0&quot;`\n</code></pre><p>If you want to support 0 value you should not put <code>required</code> tag for the fields because the validator thinks that zero is not a value</p>',18),e={},p=(0,s(3744).Z)(e,[["render",function(n,a){return t}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,t]of a)n[s]=t;return n}}}]);