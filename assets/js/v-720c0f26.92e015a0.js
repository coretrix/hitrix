"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[469],{4520:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-720c0f26",path:"/guide/services/uploader.html",title:"Uploader",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/uploader.md",git:{updatedTime:1634291321e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:1}]}}},4303:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="uploader" tabindex="-1"><a class="header-anchor" href="#uploader" aria-hidden="true">#</a> Uploader</h1><p>This service uses TUS protocol to enable fast resumable and multi-part upload of big files. It provides an easy interface for plug-in whatever data store and locker you want to implement. Currently, Amazon S3 data store and Redis locker are implemented. For Amazon data store to work, you need to register Amazon S3 service before this one, also for Redis locker to work, you need to register orm service background before this one.</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderUploader</span><span class="token punctuation">(</span>tusd<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> datastore<span class="token punctuation">.</span>GetAmazonS3Store<span class="token punctuation">,</span> locker<span class="token punctuation">.</span>GetRedisLocker<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Hitrix also provides REST uploader controller which you can register all handler methods in your router:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> uploaderController <span class="token operator">*</span>hitrixController<span class="token punctuation">.</span>UploaderController\nuploaderGroup <span class="token operator">:=</span> ginEngine<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/files/&quot;</span><span class="token punctuation">)</span>\nuploaderGroup<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span><span class="token function">AuthorizeWithHeaderStrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\tuploaderGroup<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> uploaderController<span class="token punctuation">.</span>PostFileAction<span class="token punctuation">)</span>\n\tuploaderGroup<span class="token punctuation">.</span><span class="token function">HEAD</span><span class="token punctuation">(</span><span class="token string">&quot;:id&quot;</span><span class="token punctuation">,</span> uploaderController<span class="token punctuation">.</span>HeadFile<span class="token punctuation">)</span>\n\tuploaderGroup<span class="token punctuation">.</span><span class="token function">PATCH</span><span class="token punctuation">(</span><span class="token string">&quot;:id&quot;</span><span class="token punctuation">,</span> uploaderController<span class="token punctuation">.</span>PatchFile<span class="token punctuation">)</span>\n\tuploaderGroup<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;:id&quot;</span><span class="token punctuation">,</span> uploaderController<span class="token punctuation">.</span>GetFileAction<span class="token punctuation">)</span>\n\tuploaderGroup<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">&quot;:id&quot;</span><span class="token punctuation">,</span> uploaderController<span class="token punctuation">.</span>DeleteFile<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Also you need bucket name in config:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">uploader</span><span class="token punctuation">:</span>\n  <span class="token key atrule">bucket</span><span class="token punctuation">:</span> media\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',10),t={},o=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);