"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5811],{6032:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-317eb255",path:"/guide/services/localizer.html",title:"Localizer service",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/localizer.md",git:{updatedTime:1640273751e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:2}]}}},7523:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const p=(0,e._)("h1",{id:"localizer-service",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#localizer-service","aria-hidden":"true"},"#"),(0,e.Uk)(" Localizer service")],-1),t=(0,e._)("p",null,"Localizer provides you a simple translation service that can pull and push translation pairs from local (file) and external sources (online services).",-1),o=(0,e.Uk)("Currently localizer supports only "),l={href:"https://poeditor.com",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("POEditor"),r=(0,e.Uk)(" online source."),u=(0,e.uE)('<p>Localizer using a bucket key to separate and manage translation parts of your app.</p><p>First you need these in your app config:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">translation</span><span class="token punctuation">:</span>\n  <span class="token key atrule">poeditor</span><span class="token punctuation">:</span>\n    <span class="token key atrule">api_key</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>POEDITOR_API_KEY<span class="token punctuation">]</span>\n    <span class="token key atrule">project_id</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>POEDITOR_PROJECT_ID<span class="token punctuation">]</span>\n    <span class="token key atrule">language</span><span class="token punctuation">:</span> ENV<span class="token punctuation">[</span>POEDITOR_LANGUAGE<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderLocalizer</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">//for param you can provide env var as key(not as value!) in case you want to have sub folder in locale folder </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LocalizerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Loading translation pairs from map:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>bucketKey <span class="token operator">:=</span> <span class="token string">&quot;greet-service&quot;</span>\n<span class="token builtin">append</span> <span class="token operator">:=</span> <span class="token boolean">false</span> <span class="token comment">// append or replace?</span>\npairs <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;app_name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;My App Name&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;loading_text&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Loading ...&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nlocalizerService<span class="token punctuation">.</span><span class="token function">LoadBucketFromMap</span><span class="token punctuation">(</span>\n  bucketKey<span class="token punctuation">,</span> \n  pairs<span class="token punctuation">,</span> \n  <span class="token builtin">append</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Using <code>Localize()</code> function to translate a key:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>appName<span class="token punctuation">,</span> err <span class="token operator">:=</span> localizerService<span class="token punctuation">.</span><span class="token function">Localize</span><span class="token punctuation">(</span>bucketKey<span class="token punctuation">,</span> <span class="token string">&quot;app_name&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!</span><span class="token boolean">nil</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle error</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Loading translation pairs from local file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>localizerService<span class="token punctuation">.</span><span class="token function">LoadBucketFromFile</span><span class="token punctuation">(</span>\n  bucketKey<span class="token punctuation">,</span>\n  <span class="token string">&quot;locales/greet.en.json&quot;</span><span class="token punctuation">,</span>\n  <span class="token builtin">append</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Pull the translations from external source:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>err <span class="token operator">:=</span> localizerService<span class="token punctuation">.</span><span class="token function">PullBucketFromSource</span><span class="token punctuation">(</span>bucketKey<span class="token punctuation">,</span> <span class="token builtin">append</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Push translations to external source:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>err <span class="token operator">:=</span> localizerService<span class="token punctuation">.</span><span class="token function">PushBucketToSource</span><span class="token punctuation">(</span>bucketKey<span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle error</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',17),i={},k=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,(0,e._)("p",null,[o,(0,e._)("a",l,[c,(0,e.Wm)(a)]),r]),u],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);