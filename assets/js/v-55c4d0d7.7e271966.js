"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8705],{9620:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-55c4d0d7",path:"/guide/services/websocket.html",title:"WebSocket",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/services/websocket.md",git:{updatedTime:1634917363e3,contributors:[{name:"Anton",email:"a.shumansky@gmail.com",commits:1},{name:"Krasimir Ivanov",email:"krasimir.ivanov@coretrix.com",commits:1}]}}},5104:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h1><p>This service add support of websockets. It manage the connections and provide you easy way to read and write messages</p><p>Register the service into your <code>main.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>registry<span class="token punctuation">.</span><span class="token function">ServiceProviderSocketRegistry</span><span class="token punctuation">(</span>registerHandler<span class="token punctuation">,</span> unregisterHandler <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>socket<span class="token punctuation">.</span>Socket<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Access the service:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SocketRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To be able to handle new connections you should create your own route and create a handler for it. Your handler should looks like that:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> WebsocketController <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>controller <span class="token operator">*</span>WebsocketController<span class="token punctuation">)</span> <span class="token function">InitConnection</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tws<span class="token punctuation">,</span> err <span class="token operator">:=</span> upgrader<span class="token punctuation">.</span><span class="token function">Upgrade</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\tsocketRegistryService<span class="token punctuation">,</span> has <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SocketRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> <span class="token operator">!</span>has <span class="token punctuation">{</span>\n\t\t<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Socket Registry is not registered&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\terrorLoggerService <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ErrorLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tconnection <span class="token operator">:=</span> <span class="token operator">&amp;</span>socket<span class="token punctuation">.</span>Connection<span class="token punctuation">{</span>Send<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Ws<span class="token punctuation">:</span> ws<span class="token punctuation">}</span>\n\tsocketHolder <span class="token operator">:=</span> <span class="token operator">&amp;</span>socket<span class="token punctuation">.</span>Socket<span class="token punctuation">{</span>\n\t\tErrorLogger<span class="token punctuation">:</span> errorLoggerService<span class="token punctuation">,</span>\n\t\tConnection<span class="token punctuation">:</span>  connection<span class="token punctuation">,</span>\n\t\tID<span class="token punctuation">:</span>          <span class="token string">&quot;unique connection hash based on userID, deviceID and timestamp&quot;</span><span class="token punctuation">,</span>\n\t\tNamespace<span class="token punctuation">:</span>   model<span class="token punctuation">.</span>DefaultNamespace<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tsocketRegistryService<span class="token punctuation">.</span>Register <span class="token operator">&lt;-</span> socketHolder\n\n\t<span class="token keyword">go</span> socketHolder<span class="token punctuation">.</span><span class="token function">WritePump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">go</span> socketHolder<span class="token punctuation">.</span><span class="token function">ReadPump</span><span class="token punctuation">(</span>socketRegistryService<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rawData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ts<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> socketRegistryService<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>socketHolder<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>\n\t\t\n        dto <span class="token operator">:=</span> <span class="token operator">&amp;</span>DTOMessage<span class="token punctuation">{</span><span class="token punctuation">}</span>\n        err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> dto<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n            errorLoggerService<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n            retrun\n        <span class="token punctuation">}</span>\n        <span class="token comment">//handle business logic here</span>\n        s<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>socket<span class="token punctuation">.</span>Socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>This handler initializes the new coming connections and have 2 go routines - one for writing messages and the second one for reading messages If you want to send message you should use <code>socketRegistryService.Emit</code></p><p>If you want to read coming messages you should do it in the function we are passing as second parameter of <code>ReadPump</code> method</p><p>If you want to select certain connection you can do it by the ID and this method</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>s<span class="token punctuation">,</span> err <span class="token operator">:=</span> socketRegistryService<span class="token punctuation">.</span>Sockets<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Also websocket service provide you hooks for registering new connections and for unregistering already existing connections. You can define those handlers when you register the service based on namespace of socket.</p>',13),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);